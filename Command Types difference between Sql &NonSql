{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5828c2c4-5837-4373-8fdc-d74f98e9fea8",
   "metadata": {},
   "outputs": [],
   "source": [
    "Command Types in PostgreSQL\n",
    "Commands\n",
    "DDL-data defination language\n",
    "DML- Data manipulation language \n",
    "TCL- Transaction Control Language \n",
    "DCL- Data control language\n",
    "DQl- data quary language\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507b2ec9-ce09-49aa-97ce-08e205f06dcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data Definition Language (DDL) ->DDL commands define, modify, and manage database objects like tables, schemas, and indexes.\n",
    "CREAT-Creat a new database object like a table.-> CREATE TABLE employees(id INT,name TEXT);\n",
    "ALTER-Modifies the structure of existing object.->ALTER TABLE employees ADD COLUMN age INT;\n",
    "DROP- Deletes database object like table and row .->DROP TABLE employees;\n",
    "TRUNCATE- remove all the record from a table or view.->TRUNCATETABLE employee;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ed0ce39-25c3-4c80-bc76-fa57ae96bbe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data Manipulation Language (DML)->DML commands handle data within tables, such as inserting, updating, or deleting rows.\n",
    "INSERT -> Adds new records to a table -> Insert Into employee (id,name,age)VALUES(1,'john',30);\n",
    "UPDATE -> Modifies existing data in a table. -> UPDATE employee SET age=31 WHWRE id=1 ;\n",
    "DELETE -> REMOVES SPECIFIC RECORD FROM A TABLE.->DELETE FROM employee;\n",
    "SELECT -> Retrieves data from the databace .-> SELECT*FROM employee;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57f0ddca-55e1-4fa5-8db3-2974b5e849d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "Transaction Control Language (TCL) -> TCL commands manage database transactions, ensuring data consistency and integrity.\n",
    "BEGIN -> Starts a transaction -> BEGIN;\n",
    "COMMIT -> Saves all the changes made in the tranasaction .->COMMIT;\n",
    "ROLLBACK -> Reverts changes made in the transaction.-> ROLLBACK;\n",
    "SAVEPOINT -> Sets a point within a transaction for rollback.-> SAVEPOINT sp1;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4886c0e1-a890-448e-939b-b236e2cbad44",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data Control Language (DCL) -> DCL commands control user access and permissions to the database objects.\n",
    "GRANT -> Gives specific permission to users. -> GRANT SELECT,\n",
    "                                                INSERT ON\n",
    "                                                employees TO\n",
    "                                                user1;\n",
    "\n",
    "REVOKE -> Removes specific permissions from users. ->REVOKE INSERT ON employee FROM user1;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9947b372-5cc1-4984-8dd8-93a83d0bd840",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data Query Language (DQL)->DQL focuses on querying data from the database. Though technically part of DML, itâ€™s often separated to emphasize its importance\n",
    "SELECT -> Retrieves data from one or more table. -> SELECT name employees WHERE age>25;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc105fc9-f390-42e4-9be2-7132cfebb32a",
   "metadata": {},
   "outputs": [],
   "source": [
    "Pro Tip for Beginners\n",
    "Always use COMMIT and ROLLBACK carefully to avoid unintended changes, especially in critical databases. Practice using SELECT frequently to understand your data before making changes with DML commands.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d8ffd04-67c1-453e-a1ac-a8b811669aa2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Difference Between SQL and NoSQL Databases\n",
    "SQL:\n",
    "Data is stored in tables with rows and columns (structured data).\n",
    "SQL Databases:\n",
    "Banking systems, ERP systems, and applications requiring complex queries and transactions.\n",
    "SQL :\n",
    "PostgreSQL, MySQL, Oracle, SQL Server.\n",
    "\n",
    "----------------------------------------------------------------------------------------\n",
    "NoSQL:\n",
    "Data can be stored as key- value pairs, JSON documents, wide-column stores, or graphs.\n",
    "\n",
    "NoSQL Databases:\n",
    "Social media platforms, IoT data storage, real-time analytics, and big data applications.\n",
    "\n",
    "    NoSQL\n",
    ": MongoDB, Cassandra, Redis, Couchbase.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14baf76e-1e07-4e43-ab7e-dfd86c32b307",
   "metadata": {},
   "outputs": [],
   "source": [
    "Aspect            SQL DATABASES                                       |                         NoSQL Database\n",
    "Data Model       Relational (Table-based)                             |     Non-relational (Document ,key-value, Graph,Column)\n",
    "Structure        Structured data stored in rows and columns.          |     Unstructured or semi-structured data.\n",
    "Schema           Fixed schema (predefined structured).                |     Flexible schema (dynamic structure).\n",
    "Query language   uses SQL for querying data .                         |     uses various quary method (e.g.,JSON-like queries).\n",
    "Scalability      Vertically scalable(and more resorce s to a server)  |     Horizontally scalable(add more servers/nodes).\n",
    "ACID Compliance  stroag Acid compliance(Atomicity,consistency,        |     Eventual consistency(some NonSql support ACID).\n",
    "                 lsolation, Durability).                              |\n",
    "Use Case         Suitable for complex queries and translation data.   |     Ideal for large-scale data,real time analytics,and big data.\n",
    "Example          PostgreSQL,MYSql ,orical,Sql server.                 |     Mongodb, cassandra, Redis ,Couchbase.\n",
    "Performance      optimized for complex queries and transactional data.|     Optimized for large volumes od data and fast reads /writes.\n",
    "Relationship     supoort relationship between tables(foreign keys).   |     stored data without predifined realitionship .\n",
    "Data Integrity   Ensures high data integrity and consistency.         |     Prioritizes scalability and speed over strict consistency.\n",
    "Transactions     Support Multi-row transaction                        |     Limited or no support for multi-document Trnsaction  \n",
    "    \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
